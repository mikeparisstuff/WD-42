var searchIndex = {}; var allPaths = {};
searchIndex['application'] = [{ty:"mod",name:"",path:"application",desc:"The main WD-42 application."},{ty:"struct",name:"App",path:"application",desc:"The Application struct. The meat of the WD-42 Framework"},{ty:"structfield",name:"viewDirectory",path:"application",desc:"The root directory for your static files including html, css, and js files.",parent:'44'},{ty:"structfield",name:"getRoutes",path:"application",desc:"The data structure to hold your get routes and get request handlers.\nUsers should not interact with this directly and should use App::get() instead.",parent:'44'},{ty:"structfield",name:"putRoutes",path:"application",desc:"The data structure to hold your put routes and put request handlers.\nUsers should not interact with this directly and should use App::put() instead.",parent:'44'},{ty:"structfield",name:"postRoutes",path:"application",desc:"The data structure to hold your post routes and post request handlers.\nUsers should not interact with this directly and should use App::post() instead.",parent:'44'},{ty:"structfield",name:"delRoutes",path:"application",desc:"The data structure to hold your del routes and del request handlers.\nUsers should not interact with this directly and should use App::del() instead.",parent:'44'},{ty:"structfield",name:"middlewareStack",path:"application",desc:"The data structure to hold the applied middleware functions.  Add a function to this list using App::apply()",parent:'44'},{ty:"structfield",name:"port",path:"application",desc:"The port that your server will be listening on",parent:'44'},{ty:"method",name:"clone",path:"application",desc:"",parent:'44'},{ty:"method",name:"new",path:"application",desc:"Create a new Application.",parent:'44'},{ty:"method",name:"setPort",path:"application",desc:"Set the port to be listened on",parent:'44'},{ty:"method",name:"listen",path:"application",desc:"Supply a port to listen on and actually start the WD-42 server.",parent:'44'},{ty:"method",name:"apply",path:"application",desc:"Add a middleware function to the middleware stack to be run on the\nRequest objects before reaching your request handlers.",parent:'44'},{ty:"method",name:"set_public_dir",path:"application",desc:"Set the root public directory where you will place your html, css, and js files",parent:'44'},{ty:"method",name:"get",path:"application",desc:"Add a GET route and GET request handler for that route to the application.\napp.get(\"/\", indexGet) will register the indexGet function to be called whenever\nthe server sees a get request to the route \"/\"",parent:'44'},{ty:"method",name:"post",path:"application",desc:"The same as app.get() except for post requests",parent:'44'},{ty:"method",name:"put",path:"application",desc:"The same as app.get() except for put requests",parent:'44'},{ty:"method",name:"del",path:"application",desc:"The same as app.get() except for del requests",parent:'44'},{ty:"method",name:"get_config",path:"application",desc:"",parent:'44'},{ty:"method",name:"handle_request",path:"application",desc:"",parent:'44'},{ty:"method",name:"fmt",path:"application",desc:"",parent:'44'}];allPaths['application'] = {'0':{type:'mod',name:'application'},'44':{type:'struct',name:'App'}};
searchIndex['http'] = [{ty:"mod",name:"",path:"http",desc:""},{ty:"mod",name:"buffer",path:"http",desc:""},{ty:"struct",name:"BufferedStream",path:"http::buffer",desc:""},{ty:"structfield",name:"wrapped",path:"http::buffer",desc:"",parent:'23'},{ty:"structfield",name:"read_buffer",path:"http::buffer",desc:"",parent:'23'},{ty:"structfield",name:"read_pos",path:"http::buffer",desc:"",parent:'23'},{ty:"structfield",name:"read_max",path:"http::buffer",desc:"",parent:'23'},{ty:"structfield",name:"write_buffer",path:"http::buffer",desc:"",parent:'23'},{ty:"structfield",name:"write_len",path:"http::buffer",desc:"",parent:'23'},{ty:"structfield",name:"writing_chunked_body",path:"http::buffer",desc:"",parent:'23'},{ty:"method",name:"new",path:"http::buffer",desc:"",parent:'23'},{ty:"method",name:"poke_byte",path:"http::buffer",desc:"Poke a single byte back so it will be read next. For this to make sense, you must have just\nread that byte. If `self.pos` is 0 and `self.max` is not 0 (i.e. if the buffer is just\nfilled\nVery great caution must be used in calling this as it will fail if `self.pos` is 0.",parent:'23'},{ty:"method",name:"read_byte",path:"http::buffer",desc:"Slightly faster implementation of read_byte than that which is provided by ReaderUtil\n(which just uses `read()`)",parent:'23'},{ty:"method",name:"finish_response",path:"http::buffer",desc:"Finish off writing a response: this flushes the writer and in case of chunked\nTransfer-Encoding writes the ending zero-length chunk to indicate completion.",parent:'23'},{ty:"method",name:"read",path:"http::buffer",desc:"Read at most N bytes into `buf`, where N is the minimum of `buf.len()` and the buffer size.",parent:'23'},{ty:"method",name:"write",path:"http::buffer",desc:"",parent:'23'},{ty:"method",name:"flush",path:"http::buffer",desc:"",parent:'23'},{ty:"mod",name:"client",path:"http",desc:"Modules for making HTTP requests."},{ty:"enum",name:"NetworkStream",path:"http::client",desc:"A TCP stream, plain text and with no SSL support."},{ty:"mod",name:"request",path:"http::client",desc:"Things for the construction and sending of HTTP requests."},{ty:"struct",name:"RequestWriter",path:"http::client::request",desc:""},{ty:"structfield",name:"stream",path:"http::client::request",desc:"",parent:'1056'},{ty:"structfield",name:"headers_written",path:"http::client::request",desc:"",parent:'1056'},{ty:"structfield",name:"remote_addr",path:"http::client::request",desc:"The originating IP address of the request.",parent:'1056'},{ty:"structfield",name:"headers",path:"http::client::request",desc:"The host name and IP address that the request was sent to; this must always be specified for\nHTTP/1.1 requests (or the request will be rejected), but for HTTP/1.0 requests the Host\nheader was not defined, and so this field will probably be None in such cases.\nThe headers sent with the request.",parent:'1056'},{ty:"structfield",name:"method",path:"http::client::request",desc:"The HTTP method for the request.",parent:'1056'},{ty:"structfield",name:"url",path:"http::client::request",desc:"The URL being requested.",parent:'1056'},{ty:"structfield",name:"use_ssl",path:"http::client::request",desc:"Should we use SSL?",parent:'1056'},{ty:"method",name:"new",path:"http::client::request",desc:"Create a `RequestWriter` writing to the specified location",parent:'1056'},{ty:"method",name:"new_request",path:"http::client::request",desc:"",parent:'1056'},{ty:"method",name:"try_connect",path:"http::client::request",desc:"Connect to the remote host if not already connected.",parent:'1056'},{ty:"method",name:"connect",path:"http::client::request",desc:"Connect to the remote host; fails if already connected.\nReturns ``true`` upon success and ``false`` upon failure (also use conditions).",parent:'1056'},{ty:"method",name:"try_write_headers",path:"http::client::request",desc:"Write the Request-Line and headers of the response, if we have not already done so.",parent:'1056'},{ty:"method",name:"write_headers",path:"http::client::request",desc:"Write the Status-Line and headers of the response, in preparation for writing the body.",parent:'1056'},{ty:"method",name:"read_response",path:"http::client::request",desc:"Send the request and construct a `ResponseReader` out of it.",parent:'1056'},{ty:"method",name:"write",path:"http::client::request",desc:"",parent:'1056'},{ty:"method",name:"flush",path:"http::client::request",desc:"",parent:'1056'},{ty:"mod",name:"response",path:"http::client",desc:""},{ty:"struct",name:"ResponseReader",path:"http::client::response",desc:""},{ty:"structfield",name:"stream",path:"http::client::response",desc:"",parent:'1954'},{ty:"structfield",name:"request",path:"http::client::response",desc:"The request which this is a response to",parent:'1954'},{ty:"structfield",name:"version",path:"http::client::response",desc:"The HTTP version number; typically `(1, 1)` or, less commonly, `(1, 0)`.",parent:'1954'},{ty:"structfield",name:"status",path:"http::client::response",desc:"The HTTP status indicated in the response.",parent:'1954'},{ty:"structfield",name:"headers",path:"http::client::response",desc:"The headers received in the response.",parent:'1954'},{ty:"method",name:"construct",path:"http::client::response",desc:"",parent:'1954'},{ty:"method",name:"read",path:"http::client::response",desc:"",parent:'1954'},{ty:"mod",name:"common",path:"http",desc:"Poorly categorised functions for reading things used in multiple places."},{ty:"fn",name:"read_decimal",path:"http::common",desc:"Read a positive decimal integer from the given reader."},{ty:"fn",name:"read_hexadecimal",path:"http::common",desc:"Read a positive hexadecimal integer from the given reader."},{ty:"fn",name:"read_http_version",path:"http::common",desc:"Read an HTTP-Version (e.g. \"HTTP/1.1\") from a stream."},{ty:"mod",name:"connecter",path:"http",desc:""},{ty:"trait",name:"Connecter",path:"http::connecter",desc:"A trait for the concept of opening a stream connected to a IP socket address."},{ty:"tymethod",name:"connect",path:"http::connecter",desc:"",parent:'3197'},{ty:"mod",name:"server",path:"http",desc:""},{ty:"struct",name:"Config",path:"http::server",desc:"The necessary configuration for an HTTP server."},{ty:"structfield",name:"bind_address",path:"http::server",desc:"",parent:'7929'},{ty:"structfield",name:"viewDirectory",path:"http::server",desc:"",parent:'7929'},{ty:"mod",name:"request",path:"http::server",desc:""},{ty:"struct",name:"RequestBuffer",path:"http::server::request",desc:""},{ty:"structfield",name:"stream",path:"http::server::request",desc:"The socket connection to read from",parent:'3266'},{ty:"struct",name:"Request",path:"http::server::request",desc:"An HTTP request sent to the server."},{ty:"structfield",name:"remote_addr",path:"http::server::request",desc:"The originating IP address of the request.",parent:'5788'},{ty:"structfield",name:"is_authenticated",path:"http::server::request",desc:"",parent:'5788'},{ty:"structfield",name:"headers",path:"http::server::request",desc:"The host name and IP address that the request was sent to; this must always be specified for\nHTTP/1.1 requests (or the request will be rejected), but for HTTP/1.0 requests the Host\nheader was not defined, and so this field will probably be None in such cases.\nThe headers sent with the request.",parent:'5788'},{ty:"structfield",name:"body",path:"http::server::request",desc:"The body of the request; empty for such methods as GET.",parent:'5788'},{ty:"structfield",name:"method",path:"http::server::request",desc:"The HTTP method for the request.",parent:'5788'},{ty:"structfield",name:"request_uri",path:"http::server::request",desc:"The URI that was requested, as found in the Request-URI of the Request-Line.\nYou will almost never need to use this; you should prefer the `url` field instead.",parent:'5788'},{ty:"structfield",name:"close_connection",path:"http::server::request",desc:"Whether to close the TCP connection when the request has been served.\nThe alternative is keeping the connection open and waiting for another request.",parent:'5788'},{ty:"structfield",name:"version",path:"http::server::request",desc:"The HTTP version number; typically `(1, 1)` or, less commonly, `(1, 0)`.",parent:'5788'},{ty:"enum",name:"RequestUri",path:"http::server::request",desc:"The URI (Request-URI in RFC 2616) as specified in the Status-Line of an HTTP request"},{ty:"variant",name:"Star",path:"http::server::request",desc:"'The asterisk \"*\" means that the request does not apply to a particular resource, but to the\nserver itself, and is only allowed when the method used does not necessarily apply to a\nresource. One example would be \"OPTIONS * HTTP/1.1\" '",parent:'5876'},{ty:"variant",name:"AbsoluteUri",path:"http::server::request",desc:"'The absoluteURI form is REQUIRED when the request is being made to a proxy. The proxy is\nrequested to forward the request or service it from a valid cache, and return the response.\nNote that the proxy MAY forward the request on to another proxy or directly to the server\nspecified by the absoluteURI. In order to avoid request loops, a proxy MUST be able to\nrecognize all of its server names, including any aliases, local variations, and the numeric\nIP address. An example Request-Line would be:\n\"GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1\"'",parent:'5876'},{ty:"variant",name:"AbsolutePath",path:"http::server::request",desc:"'To allow for transition to absoluteURIs in all requests in future versions of HTTP, all\nHTTP/1.1 servers MUST accept the absoluteURI form in requests, even though HTTP/1.1 clients\nwill only generate them in requests to proxies.'",parent:'5876'},{ty:"variant",name:"Authority",path:"http::server::request",desc:"'The authority form is only used by the CONNECT method (CONNECT).'",parent:'5876'},{ty:"static",name:"MAX_METHOD_LEN",path:"http::server::request",desc:""},{ty:"method",name:"new",path:"http::server::request",desc:"",parent:'3266'},{ty:"method",name:"read_request_line",path:"http::server::request",desc:"",parent:'3266'},{ty:"method",name:"read_header",path:"http::server::request",desc:"Read a header (name, value) pair.",parent:'3266'},{ty:"method",name:"read",path:"http::server::request",desc:"",parent:'3266'},{ty:"method",name:"clone",path:"http::server::request",desc:"",parent:'5788'},{ty:"method",name:"clone",path:"http::server::request",desc:"",parent:'5876'},{ty:"method",name:"eq",path:"http::server::request",desc:"",parent:'5876'},{ty:"method",name:"ne",path:"http::server::request",desc:"",parent:'5876'},{ty:"method",name:"from_str",path:"http::server::request",desc:"Interpret a RFC2616 Request-URI",parent:'5876'},{ty:"method",name:"fmt",path:"http::server::request",desc:"",parent:'5876'},{ty:"method",name:"load",path:"http::server::request",desc:"Get a response from an open socket.",parent:'5788'},{ty:"mod",name:"response",path:"http::server",desc:""},{ty:"struct",name:"ResponseWriter",path:"http::server::response",desc:""},{ty:"structfield",name:"writer",path:"http::server::response",desc:"",parent:'6677'},{ty:"structfield",name:"headers_written",path:"http::server::response",desc:"",parent:'6677'},{ty:"structfield",name:"request",path:"http::server::response",desc:"",parent:'6677'},{ty:"structfield",name:"headers",path:"http::server::response",desc:"",parent:'6677'},{ty:"structfield",name:"status",path:"http::server::response",desc:"",parent:'6677'},{ty:"structfield",name:"viewDirectory",path:"http::server::response",desc:"",parent:'6677'},{ty:"method",name:"new",path:"http::server::response",desc:"Create a `ResponseWriter` writing to the specified location",parent:'6677'},{ty:"method",name:"write_content_auto",path:"http::server::response",desc:"Write a response with the specified Content-Type and content; the Content-Length header is\nset based upon the contents",parent:'6677'},{ty:"method",name:"try_write_headers",path:"http::server::response",desc:"Write the Status-Line and headers of the response, if we have not already done so.",parent:'6677'},{ty:"method",name:"sendFile",path:"http::server::response",desc:"Send a file by supplying the relative path from the applications public directory.\ni.e. if the public directory is /public and we call sendFile(~\"index.html\")\nthis would look for /public/index.html from the root project directory",parent:'6677'},{ty:"method",name:"write_headers",path:"http::server::response",desc:"Write the Status-Line and headers of the response, in preparation for writing the body.",parent:'6677'},{ty:"method",name:"finish_response",path:"http::server::response",desc:"",parent:'6677'},{ty:"method",name:"write",path:"http::server::response",desc:"",parent:'6677'},{ty:"method",name:"flush",path:"http::server::response",desc:"",parent:'6677'},{ty:"trait",name:"Server",path:"http::server",desc:""},{ty:"tymethod",name:"handle_request",path:"http::server",desc:"",parent:'7248'},{ty:"tymethod",name:"get_config",path:"http::server",desc:"",parent:'7248'},{ty:"method",name:"serve_forever",path:"http::server",desc:"Attempt to bind to the address and port and start serving forever.",parent:'7248'},{ty:"mod",name:"method",path:"http",desc:""},{ty:"enum",name:"Method",path:"http::method",desc:"HTTP methods, as defined in RFC 2616, §5.1.1."},{ty:"variant",name:"Options",path:"http::method",desc:"",parent:'8597'},{ty:"variant",name:"Get",path:"http::method",desc:"",parent:'8597'},{ty:"variant",name:"Head",path:"http::method",desc:"",parent:'8597'},{ty:"variant",name:"Post",path:"http::method",desc:"",parent:'8597'},{ty:"variant",name:"Put",path:"http::method",desc:"",parent:'8597'},{ty:"variant",name:"Delete",path:"http::method",desc:"",parent:'8597'},{ty:"variant",name:"Trace",path:"http::method",desc:"",parent:'8597'},{ty:"variant",name:"Connect",path:"http::method",desc:"",parent:'8597'},{ty:"variant",name:"Patch",path:"http::method",desc:"",parent:'8597'},{ty:"variant",name:"ExtensionMethod",path:"http::method",desc:"",parent:'8597'},{ty:"method",name:"clone",path:"http::method",desc:"",parent:'8597'},{ty:"method",name:"eq",path:"http::method",desc:"",parent:'8597'},{ty:"method",name:"ne",path:"http::method",desc:"",parent:'8597'},{ty:"method",name:"from_str",path:"http::method",desc:"Get a *known* `Method` from an *ASCII* string, regardless of case.",parent:'8597'},{ty:"method",name:"fmt",path:"http::method",desc:"",parent:'8597'},{ty:"method",name:"from_str_or_new",path:"http::method",desc:"Get a `Method` from an *ASCII* string.",parent:'8597'},{ty:"mod",name:"headers",path:"http",desc:"Types and utilities for working with headers in HTTP requests and responses."},{ty:"struct",name:"HeaderValueByteIterator",path:"http::headers",desc:"An iterator over the bytes of a header value.\nThis ensures one cannot read past the end of a header mistakenly and that linear white space is\nhandled correctly so that nothing else needs to worry about it. Any linear whitespace (multiple\nspaces outside of a quoted-string) is compacted into a single SP."},{ty:"structfield",name:"reader",path:"http::headers",desc:"",parent:'13707'},{ty:"structfield",name:"next_byte",path:"http::headers",desc:"This field serves two purposes. *During* iteration, it will typically be ``None``, but\ncertain cases will cause it to be a ``Some``, meaning that the next ``next()`` call will\nreturn that value rather than reading a new byte. At the *end* of iteration (after\n``next()`` has returned ``None``), it will be the extra byte which it has had to consume\nfrom the stream because of the possibility of linear white space of the form ``CR LF SP``.\nIt is guaranteed that if ``self.state == Finished`` this will be a ``Some``.",parent:'13707'},{ty:"structfield",name:"at_start",path:"http::headers",desc:"",parent:'13707'},{ty:"structfield",name:"state",path:"http::headers",desc:"",parent:'13707'},{ty:"enum",name:"HeaderLineErr",path:"http::headers",desc:""},{ty:"variant",name:"EndOfFile",path:"http::headers",desc:"",parent:'9138'},{ty:"variant",name:"EndOfHeaders",path:"http::headers",desc:"",parent:'9138'},{ty:"variant",name:"MalformedHeaderValue",path:"http::headers",desc:"",parent:'9138'},{ty:"variant",name:"MalformedHeaderSyntax",path:"http::headers",desc:"",parent:'9138'},{ty:"enum",name:"ConsumeCommaLWSResult",path:"http::headers",desc:""},{ty:"variant",name:"CommaConsumed",path:"http::headers",desc:"",parent:'13179'},{ty:"variant",name:"EndOfValue",path:"http::headers",desc:"",parent:'13179'},{ty:"variant",name:"ErrCommaNotFound",path:"http::headers",desc:"",parent:'13179'},{ty:"fn",name:"header_enum_from_stream",path:"http::headers",desc:"Shifted out of being a default method to fix an ICE (not yet reported, TODO)"},{ty:"mod",name:"test_utils",path:"http::headers",desc:""},{ty:"fn",name:"from_stream_with_str",path:"http::headers::test_utils",desc:""},{ty:"fn",name:"to_stream_into_str",path:"http::headers::test_utils",desc:""},{ty:"fn",name:"assert_invalid",path:"http::headers::test_utils",desc:""},{ty:"fn",name:"assert_conversion_correct",path:"http::headers::test_utils",desc:""},{ty:"fn",name:"assert_interpretation_correct",path:"http::headers::test_utils",desc:""},{ty:"mod",name:"serialization_utils",path:"http::headers",desc:"Utility functions for assisting with conversion of headers from and to the HTTP text form."},{ty:"fn",name:"normalise_header_name",path:"http::headers::serialization_utils",desc:"Normalise an HTTP header name."},{ty:"fn",name:"comma_split",path:"http::headers::serialization_utils",desc:"Split a value on commas, as is common for HTTP headers."},{ty:"fn",name:"comma_split_iter",path:"http::headers::serialization_utils",desc:""},{ty:"fn",name:"comma_join",path:"http::headers::serialization_utils",desc:"Join a vector of values with commas, as is common for HTTP headers."},{ty:"fn",name:"push_quality",path:"http::headers::serialization_utils",desc:""},{ty:"fn",name:"push_maybe_quoted_string",path:"http::headers::serialization_utils",desc:"Push a ( token | quoted-string ) onto a string and return it again"},{ty:"fn",name:"maybe_quoted_string",path:"http::headers::serialization_utils",desc:"Make a string into a ( token | quoted-string ), preferring a token"},{ty:"fn",name:"push_quoted_string",path:"http::headers::serialization_utils",desc:"Quote a string, to turn it into an RFC 2616 quoted-string"},{ty:"fn",name:"quoted_string",path:"http::headers::serialization_utils",desc:"Quote a string, to turn it into an RFC 2616 quoted-string"},{ty:"fn",name:"unquote_string",path:"http::headers::serialization_utils",desc:"Parse a quoted-string. Returns ``None`` if the string is not a valid quoted-string."},{ty:"fn",name:"maybe_unquote_string",path:"http::headers::serialization_utils",desc:"Parse a ( token | quoted-string ). Returns ``None`` if it is not valid."},{ty:"fn",name:"push_parameter",path:"http::headers::serialization_utils",desc:""},{ty:"fn",name:"push_parameters",path:"http::headers::serialization_utils",desc:""},{ty:"trait",name:"WriterUtil",path:"http::headers::serialization_utils",desc:""},{ty:"method",name:"write_maybe_quoted_string",path:"http::headers::serialization_utils",desc:"",parent:'10096'},{ty:"method",name:"write_quoted_string",path:"http::headers::serialization_utils",desc:"",parent:'10096'},{ty:"method",name:"write_parameter",path:"http::headers::serialization_utils",desc:"",parent:'10096'},{ty:"method",name:"write_parameters",path:"http::headers::serialization_utils",desc:"",parent:'10096'},{ty:"method",name:"write_quality",path:"http::headers::serialization_utils",desc:"",parent:'10096'},{ty:"method",name:"write_token",path:"http::headers::serialization_utils",desc:"",parent:'10096'},{ty:"mod",name:"accept_ranges",path:"http::headers",desc:"The Accept-Ranges request header, defined in RFC 2616, Section 14.5."},{ty:"enum",name:"RangeUnit",path:"http::headers::accept_ranges",desc:""},{ty:"variant",name:"Bytes",path:"http::headers::accept_ranges",desc:"",parent:'11036'},{ty:"variant",name:"OtherRangeUnit",path:"http::headers::accept_ranges",desc:"",parent:'11036'},{ty:"enum",name:"AcceptableRanges",path:"http::headers::accept_ranges",desc:""},{ty:"variant",name:"RangeUnits",path:"http::headers::accept_ranges",desc:"",parent:'11155'},{ty:"variant",name:"NoAcceptableRanges",path:"http::headers::accept_ranges",desc:"",parent:'11155'},{ty:"method",name:"eq",path:"http::headers::accept_ranges",desc:"",parent:'11036'},{ty:"method",name:"ne",path:"http::headers::accept_ranges",desc:"",parent:'11036'},{ty:"method",name:"clone",path:"http::headers::accept_ranges",desc:"",parent:'11036'},{ty:"method",name:"eq",path:"http::headers::accept_ranges",desc:"",parent:'11155'},{ty:"method",name:"ne",path:"http::headers::accept_ranges",desc:"",parent:'11155'},{ty:"method",name:"clone",path:"http::headers::accept_ranges",desc:"",parent:'11155'},{ty:"method",name:"from_stream",path:"http::headers::accept_ranges",desc:"",parent:'11155'},{ty:"method",name:"to_stream",path:"http::headers::accept_ranges",desc:"",parent:'11155'},{ty:"method",name:"http_value",path:"http::headers::accept_ranges",desc:"",parent:'11155'},{ty:"mod",name:"connection",path:"http::headers",desc:"The Connection general header, defined in RFC 2616, Section 14.10."},{ty:"enum",name:"Connection",path:"http::headers::connection",desc:"A value for the Connection header. Note that should it be a ``Token``, the string is in\nnormalised header case (e.g. \"Keep-Alive\")."},{ty:"variant",name:"Token",path:"http::headers::connection",desc:"",parent:'11494'},{ty:"variant",name:"Close",path:"http::headers::connection",desc:"",parent:'11494'},{ty:"method",name:"eq",path:"http::headers::connection",desc:"",parent:'11494'},{ty:"method",name:"ne",path:"http::headers::connection",desc:"",parent:'11494'},{ty:"method",name:"clone",path:"http::headers::connection",desc:"",parent:'11494'},{ty:"method",name:"fmt",path:"http::headers::connection",desc:"",parent:'11494'},{ty:"method",name:"from_stream",path:"http::headers::connection",desc:"",parent:'11494'},{ty:"method",name:"to_stream",path:"http::headers::connection",desc:"",parent:'11494'},{ty:"method",name:"http_value",path:"http::headers::connection",desc:"",parent:'11494'},{ty:"mod",name:"content_type",path:"http::headers",desc:"The Content-Type entity header, defined in RFC 2616, Section 14.17."},{ty:"struct",name:"MediaType",path:"http::headers::content_type",desc:""},{ty:"structfield",name:"type_",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"structfield",name:"subtype",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"structfield",name:"parameters",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"fn",name:"MediaType",path:"http::headers::content_type",desc:""},{ty:"method",name:"eq",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"method",name:"ne",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"method",name:"clone",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"method",name:"fmt",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"method",name:"from_stream",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"method",name:"to_stream",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"method",name:"http_value",path:"http::headers::content_type",desc:"",parent:'11748'},{ty:"mod",name:"etag",path:"http::headers",desc:""},{ty:"struct",name:"EntityTag",path:"http::headers::etag",desc:""},{ty:"structfield",name:"weak",path:"http::headers::etag",desc:"",parent:'12204'},{ty:"structfield",name:"opaque_tag",path:"http::headers::etag",desc:"",parent:'12204'},{ty:"fn",name:"weak_etag",path:"http::headers::etag",desc:""},{ty:"fn",name:"strong_etag",path:"http::headers::etag",desc:""},{ty:"method",name:"eq",path:"http::headers::etag",desc:"",parent:'12204'},{ty:"method",name:"ne",path:"http::headers::etag",desc:"",parent:'12204'},{ty:"method",name:"clone",path:"http::headers::etag",desc:"",parent:'12204'},{ty:"method",name:"fmt",path:"http::headers::etag",desc:"",parent:'12204'},{ty:"method",name:"from_stream",path:"http::headers::etag",desc:"",parent:'12204'},{ty:"method",name:"to_stream",path:"http::headers::etag",desc:"",parent:'12204'},{ty:"method",name:"http_value",path:"http::headers::etag",desc:"",parent:'12204'},{ty:"mod",name:"host",path:"http::headers",desc:"The Host request header, defined in RFC 2616, Section 14.23."},{ty:"struct",name:"Host",path:"http::headers::host",desc:"A simple little thing for the host of a request"},{ty:"structfield",name:"name",path:"http::headers::host",desc:"The name of the host that was requested",parent:'12556'},{ty:"structfield",name:"port",path:"http::headers::host",desc:"If unspecified, assume the default port was used (80 for HTTP, 443 for HTTPS).\nIn that case, you shouldn't need to worry about it in URLs that you build, provided you\ninclude the scheme.",parent:'12556'},{ty:"method",name:"eq",path:"http::headers::host",desc:"",parent:'12556'},{ty:"method",name:"ne",path:"http::headers::host",desc:"",parent:'12556'},{ty:"method",name:"clone",path:"http::headers::host",desc:"",parent:'12556'},{ty:"method",name:"fmt",path:"http::headers::host",desc:"",parent:'12556'},{ty:"method",name:"from_stream",path:"http::headers::host",desc:"",parent:'12556'},{ty:"method",name:"http_value",path:"http::headers::host",desc:"",parent:'12556'},{ty:"mod",name:"transfer_encoding",path:"http::headers",desc:"The Transfer-Encoding request header, defined in RFC 2616, sections 14.41 and 3.6."},{ty:"enum",name:"TransferCoding",path:"http::headers::transfer_encoding",desc:"RFC 2616, section 3.6:"},{ty:"variant",name:"Chunked",path:"http::headers::transfer_encoding",desc:"",parent:'12874'},{ty:"variant",name:"TransferExtension",path:"http::headers::transfer_encoding",desc:"",parent:'12874'},{ty:"method",name:"eq",path:"http::headers::transfer_encoding",desc:"",parent:'12874'},{ty:"method",name:"ne",path:"http::headers::transfer_encoding",desc:"",parent:'12874'},{ty:"method",name:"clone",path:"http::headers::transfer_encoding",desc:"",parent:'12874'},{ty:"method",name:"from_stream",path:"http::headers::transfer_encoding",desc:"",parent:'12874'},{ty:"method",name:"to_stream",path:"http::headers::transfer_encoding",desc:"",parent:'12874'},{ty:"method",name:"http_value",path:"http::headers::transfer_encoding",desc:"",parent:'12874'},{ty:"mod",name:"request",path:"http::headers",desc:""},{ty:"struct",name:"HeaderCollection",path:"http::headers::request",desc:""},{ty:"structfield",name:"cache_control",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"connection",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"date",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"pragma",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"trailer",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"transfer_encoding",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"upgrade",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"via",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"warning",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"accept",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"accept_charset",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"accept_encoding",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"accept_language",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"authorization",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"expect",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"from",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"host",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"if_match",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"if_modified_since",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"if_none_match",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"if_range",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"if_unmodified_since",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"max_forwards",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"proxy_authorization",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"range",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"referer",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"te",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"user_agent",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"allow",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"content_encoding",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"content_language",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"content_length",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"content_location",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"content_md5",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"content_range",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"content_type",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"expires",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"last_modified",path:"http::headers::request",desc:"",parent:'15953'},{ty:"structfield",name:"extensions",path:"http::headers::request",desc:"",parent:'15953'},{ty:"struct",name:"HeaderCollectionIterator",path:"http::headers::request",desc:""},{ty:"structfield",name:"pos",path:"http::headers::request",desc:"",parent:'16886'},{ty:"structfield",name:"coll",path:"http::headers::request",desc:"",parent:'16886'},{ty:"structfield",name:"ext_iter",path:"http::headers::request",desc:"",parent:'16886'},{ty:"enum",name:"Header",path:"http::headers::request",desc:""},{ty:"variant",name:"CacheControl",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Connection",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Date",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Pragma",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Trailer",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"TransferEncoding",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Upgrade",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Via",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Warning",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Accept",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"AcceptCharset",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"AcceptEncoding",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"AcceptLanguage",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Authorization",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Expect",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"From",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Host",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"IfMatch",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"IfModifiedSince",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"IfNoneMatch",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"IfRange",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"IfUnmodifiedSince",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"MaxForwards",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"ProxyAuthorization",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Range",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Referer",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Te",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"UserAgent",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Allow",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"ContentEncoding",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"ContentLanguage",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"ContentLength",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"ContentLocation",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"ContentMd5",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"ContentRange",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"ContentType",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"Expires",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"LastModified",path:"http::headers::request",desc:"",parent:'15759'},{ty:"variant",name:"ExtensionHeader",path:"http::headers::request",desc:"",parent:'15759'},{ty:"method",name:"clone",path:"http::headers::request",desc:"",parent:'15953'},{ty:"method",name:"new",path:"http::headers::request",desc:"",parent:'15953'},{ty:"method",name:"get_header",path:"http::headers::request",desc:"",parent:'15953'},{ty:"method",name:"insert",path:"http::headers::request",desc:"Consume a header, putting it into this structure.",parent:'15953'},{ty:"method",name:"iter",path:"http::headers::request",desc:"",parent:'15953'},{ty:"method",name:"write_all",path:"http::headers::request",desc:"Write all the headers to a writer. This includes an extra \\r\\n at the end to\nsignal end of headers.",parent:'15953'},{ty:"method",name:"next",path:"http::headers::request",desc:"",parent:'16886'},{ty:"method",name:"header_name",path:"http::headers::request",desc:"",parent:'15759'},{ty:"method",name:"header_value",path:"http::headers::request",desc:"",parent:'15759'},{ty:"method",name:"write_header",path:"http::headers::request",desc:"",parent:'15759'},{ty:"method",name:"value_from_stream",path:"http::headers::request",desc:"",parent:'15759'},{ty:"mod",name:"response",path:"http::headers",desc:""},{ty:"struct",name:"HeaderCollection",path:"http::headers::response",desc:""},{ty:"structfield",name:"cache_control",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"connection",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"date",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"pragma",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"trailer",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"transfer_encoding",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"upgrade",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"via",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"warning",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"accept_patch",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"accept_ranges",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"age",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"etag",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"location",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"proxy_authenticate",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"retry_after",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"server",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"vary",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"www_authenticate",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"allow",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"content_encoding",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"content_language",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"content_length",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"content_location",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"content_md5",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"content_range",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"content_type",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"expires",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"last_modified",path:"http::headers::response",desc:"",parent:'19340'},{ty:"structfield",name:"extensions",path:"http::headers::response",desc:"",parent:'19340'},{ty:"struct",name:"HeaderCollectionIterator",path:"http::headers::response",desc:""},{ty:"structfield",name:"pos",path:"http::headers::response",desc:"",parent:'20095'},{ty:"structfield",name:"coll",path:"http::headers::response",desc:"",parent:'20095'},{ty:"structfield",name:"ext_iter",path:"http::headers::response",desc:"",parent:'20095'},{ty:"enum",name:"Header",path:"http::headers::response",desc:""},{ty:"variant",name:"CacheControl",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Connection",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Date",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Pragma",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Trailer",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"TransferEncoding",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Upgrade",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Via",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Warning",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"AcceptPatch",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"AcceptRanges",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Age",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ETag",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Location",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ProxyAuthenticate",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"RetryAfter",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Server",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Vary",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"WwwAuthenticate",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Allow",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ContentEncoding",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ContentLanguage",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ContentLength",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ContentLocation",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ContentMd5",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ContentRange",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ContentType",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"Expires",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"LastModified",path:"http::headers::response",desc:"",parent:'19189'},{ty:"variant",name:"ExtensionHeader",path:"http::headers::response",desc:"",parent:'19189'},{ty:"method",name:"clone",path:"http::headers::response",desc:"",parent:'19340'},{ty:"method",name:"new",path:"http::headers::response",desc:"",parent:'19340'},{ty:"method",name:"get_header",path:"http::headers::response",desc:"",parent:'19340'},{ty:"method",name:"insert",path:"http::headers::response",desc:"Consume a header, putting it into this structure.",parent:'19340'},{ty:"method",name:"iter",path:"http::headers::response",desc:"",parent:'19340'},{ty:"method",name:"write_all",path:"http::headers::response",desc:"Write all the headers to a writer. This includes an extra \\r\\n at the end to\nsignal end of headers.",parent:'19340'},{ty:"method",name:"next",path:"http::headers::response",desc:"",parent:'20095'},{ty:"method",name:"header_name",path:"http::headers::response",desc:"",parent:'19189'},{ty:"method",name:"header_value",path:"http::headers::response",desc:"",parent:'19189'},{ty:"method",name:"write_header",path:"http::headers::response",desc:"",parent:'19189'},{ty:"method",name:"value_from_stream",path:"http::headers::response",desc:"",parent:'19189'},{ty:"typedef",name:"DeltaSeconds",path:"http::headers",desc:""},{ty:"trait",name:"HeaderEnum",path:"http::headers",desc:""},{ty:"tymethod",name:"header_name",path:"http::headers",desc:"",parent:'13285'},{ty:"tymethod",name:"header_value",path:"http::headers",desc:"",parent:'13285'},{ty:"tymethod",name:"write_header",path:"http::headers",desc:"",parent:'13285'},{ty:"tymethod",name:"value_from_stream",path:"http::headers",desc:"Return values:",parent:'13285'},{ty:"trait",name:"HeaderConvertible",path:"http::headers",desc:"A datatype for headers."},{ty:"tymethod",name:"from_stream",path:"http::headers",desc:"Read a header value from an iterator over the raw value.",parent:'15271'},{ty:"method",name:"to_stream",path:"http::headers",desc:"Write the HTTP value of the header to the stream.",parent:'15271'},{ty:"tymethod",name:"http_value",path:"http::headers",desc:"The value of the header as it would be written for an HTTP header.",parent:'15271'},{ty:"trait",name:"CommaListHeaderConvertible",path:"http::headers",desc:"A header with multiple comma-separated values. Implement this and a HeaderConvertible\nimplementation for Vec<T> is yours for free—just make sure your reading does not consume the\ncomma."},{ty:"method",name:"eq",path:"http::headers",desc:"",parent:'13179'},{ty:"method",name:"ne",path:"http::headers",desc:"",parent:'13179'},{ty:"method",name:"clone",path:"http::headers",desc:"",parent:'13179'},{ty:"method",name:"new",path:"http::headers",desc:"",parent:'13707'},{ty:"method",name:"verify_consumed",path:"http::headers",desc:"Check that the entire header value has been consumed.",parent:'13707'},{ty:"method",name:"some_if_consumed",path:"http::headers",desc:"Turn a constructed header value into an Option: Some(value) if the header value is consumed\nor None if it is not, thus indicating: \"I'm finished and expect nothing more. Anything more\nis an error.\"",parent:'13707'},{ty:"method",name:"consume_optional_lws",path:"http::headers",desc:"Consume optional `*LWS`. That is, zero or more of SP and HT, until it\ngets to something other than SP and HT or gets to the end of the header.",parent:'13707'},{ty:"method",name:"consume_lws",path:"http::headers",desc:"Consume `1*LWS`. That is, one or more of SP and HT, until it gets to\nsomething other than SP and HT or gets to the end of the header.",parent:'13707'},{ty:"method",name:"consume_comma_lws",path:"http::headers",desc:"Return values:\n- CommaConsumed if there was a comma and it was consumed;\n- EndOfValue if the header value has been completely consumed;\n- ErrCommaNotFound if the next thing wasn't a comma (this is an error state)",parent:'13707'},{ty:"method",name:"read_quoted_string",path:"http::headers",desc:"Read a quoted-string from the current position.\nIf the quoted-string is not begun immediately or the header ends before it is completed,\nthen None is returned; TODO: decide if I can return the bytes read (at present, escapes and\ndouble quote would be lost if I did that).",parent:'13707'},{ty:"method",name:"read_token_or_quoted_string",path:"http::headers",desc:"Read a token (RFC 2616 definition) from the header value.",parent:'13707'},{ty:"method",name:"read_token",path:"http::headers",desc:"Read a token (RFC 2616 definition) from the header value.",parent:'13707'},{ty:"method",name:"next",path:"http::headers",desc:"",parent:'13707'},{ty:"method",name:"from_stream",path:"http::method",desc:"",parent:'8597'},{ty:"method",name:"http_value",path:"http::method",desc:"",parent:'8597'},{ty:"mod",name:"rfc2616",path:"http",desc:"Values taken from RFC 2616"},{ty:"fn",name:"is_octet",path:"http::rfc2616",desc:"OCTET: any 8-bit sequence of data (typechecking ensures this to be true)"},{ty:"fn",name:"is_char",path:"http::rfc2616",desc:"CHAR: any US-ASCII character (octets 0 - 127)"},{ty:"fn",name:"is_upalpha",path:"http::rfc2616",desc:"UPALPHA: any US-ASCII uppercase letter \"A\"..\"Z\">"},{ty:"fn",name:"is_loalpha",path:"http::rfc2616",desc:"LOALPHA: any US-ASCII lowercase letter \"a\"..\"z\">"},{ty:"fn",name:"is_alpha",path:"http::rfc2616",desc:"ALPHA: UPALPHA | LOALPHA"},{ty:"fn",name:"is_digit",path:"http::rfc2616",desc:"DIGIT: any US-ASCII digit \"0\"..\"9\""},{ty:"fn",name:"is_ctl",path:"http::rfc2616",desc:"CTL: any US-ASCII control character (octets 0 - 31) and DEL (127)"},{ty:"fn",name:"is_hex",path:"http::rfc2616",desc:"HEX: \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | DIGIT"},{ty:"fn",name:"is_token_item",path:"http::rfc2616",desc:"token          = 1*<any CHAR except CTLs or separators>"},{ty:"fn",name:"is_token",path:"http::rfc2616",desc:""},{ty:"fn",name:"is_separator",path:"http::rfc2616",desc:"separators: \"(\" | \")\" | \"<\" | \">\" | \"@\" | \",\" | \";\" | \":\"\n| \"\\\" | <\"> | \"/\" | \"[\" | \"]\" | \"?\" | \"=\" | \"{\"\n| \"}\" | SP | HT"},{ty:"static",name:"CR",path:"http::rfc2616",desc:"CR: US-ASCII CR, carriage return (13)"},{ty:"static",name:"LF",path:"http::rfc2616",desc:"LF: US-ASCII LF, linefeed (10)"},{ty:"static",name:"SP",path:"http::rfc2616",desc:"SP: US-ASCII SP, space (32)"},{ty:"static",name:"HT",path:"http::rfc2616",desc:"HT: US-ASCII HT, horizontal-tab (9)"},{ty:"static",name:"COLON",path:"http::rfc2616",desc:"US-ASCII colon (58)"},{ty:"static",name:"DOUBLE_QUOTE",path:"http::rfc2616",desc:"<\">: US-ASCII double-quote mark (34)"},{ty:"static",name:"BACKSLASH",path:"http::rfc2616",desc:"\"\\\": US-ASCII backslash (92)"},{ty:"mod",name:"status",path:"http",desc:""},{ty:"enum",name:"Status",path:"http::status",desc:"HTTP status code"},{ty:"variant",name:"Continue",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"SwitchingProtocols",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Processing",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Ok",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Created",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Accepted",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"NonAuthoritativeInformation",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"NoContent",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"ResetContent",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"PartialContent",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"MultiStatus",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"AlreadyReported",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"ImUsed",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"MultipleChoices",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"MovedPermanently",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Found",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"SeeOther",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"NotModified",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"UseProxy",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"SwitchProxy",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"TemporaryRedirect",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"PermanentRedirect",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"BadRequest",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Unauthorized",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"PaymentRequired",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Forbidden",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"NotFound",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"MethodNotAllowed",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"NotAcceptable",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"ProxyAuthenticationRequired",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"RequestTimeout",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Conflict",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Gone",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"LengthRequired",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"PreconditionFailed",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"RequestEntityTooLarge",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"RequestUriTooLong",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"UnsupportedMediaType",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"RequestedRangeNotSatisfiable",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"ExpectationFailed",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"ImATeapot",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"AuthenticationTimeout",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"UnprocessableEntity",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"Locked",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"FailedDependency",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"MethodFailure",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"UnorderedCollection",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"UpgradeRequired",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"PreconditionRequired",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"TooManyRequests",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"RequestHeaderFieldsTooLarge",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"UnavailableForLegalReasons",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"InternalServerError",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"NotImplemented",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"BadGateway",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"ServiceUnavailable",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"GatewayTimeout",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"HttpVersionNotSupported",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"VariantAlsoNegotiates",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"InsufficientStorage",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"LoopDetected",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"NotExtended",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"NetworkAuthenticationRequired",path:"http::status",desc:"",parent:'22466'},{ty:"variant",name:"UnregisteredStatus",path:"http::status",desc:"",parent:'22466'},{ty:"method",name:"clone",path:"http::status",desc:"",parent:'22466'},{ty:"method",name:"eq",path:"http::status",desc:"",parent:'22466'},{ty:"method",name:"ne",path:"http::status",desc:"",parent:'22466'},{ty:"method",name:"code",path:"http::status",desc:"Get the status code",parent:'22466'},{ty:"method",name:"reason",path:"http::status",desc:"Get the reason phrase",parent:'22466'},{ty:"method",name:"from_code_and_reason",path:"http::status",desc:"Get a status from the code and reason",parent:'22466'},{ty:"method",name:"fmt",path:"http::status",desc:"",parent:'22466'},{ty:"method",name:"fmt",path:"http::status",desc:"",parent:'22466'},{ty:"method",name:"to_i64",path:"http::status",desc:"Equivalent to `Some(self.code() as i64)`",parent:'22466'},{ty:"method",name:"to_u64",path:"http::status",desc:"Equivalent to `Some(self.code() as u64)`",parent:'22466'},{ty:"method",name:"from_i64",path:"http::status",desc:"Get a *registered* status code from the number of its status code.",parent:'22466'},{ty:"method",name:"from_u64",path:"http::status",desc:"Get a *registered* status code from the number of its status code.",parent:'22466'}];allPaths['http'] = {'22515':{type:'enum',name:'Status'},'15320':{type:'trait',name:'CommaListHeaderConvertible'},'22503':{type:'enum',name:'Status'},'19282':{type:'enum',name:'Header'},'22506':{type:'enum',name:'Status'},'22480':{type:'enum',name:'Status'},'22201':{type:'fn',name:'is_separator'},'15271':{type:'trait',name:'HeaderConvertible'},'22180':{type:'fn',name:'is_token'},'22054':{type:'fn',name:'is_ctl'},'12874':{type:'enum',name:'TransferCoding'},'9805':{type:'fn',name:'assert_interpretation_correct'},'22485':{type:'enum',name:'Status'},'15863':{type:'enum',name:'Header'},'22493':{type:'enum',name:'Status'},'10713':{type:'fn',name:'push_quoted_string'},'8604':{type:'enum',name:'Method'},'22468':{type:'enum',name:'Status'},'15907':{type:'enum',name:'Header'},'11499':{type:'enum',name:'Connection'},'22502':{type:'enum',name:'Status'},'15764':{type:'enum',name:'Header'},'19230':{type:'enum',name:'Header'},'15939':{type:'enum',name:'Header'},'12875':{type:'enum',name:'TransferCoding'},'1039':{type:'mod',name:'request'},'22467':{type:'enum',name:'Status'},'8606':{type:'enum',name:'Method'},'11161':{type:'enum',name:'AcceptableRanges'},'12196':{type:'mod',name:'etag'},'19326':{type:'enum',name:'Header'},'22504':{type:'enum',name:'Status'},'19209':{type:'enum',name:'Header'},'19200':{type:'enum',name:'Header'},'11042':{type:'enum',name:'RangeUnit'},'2442':{type:'mod',name:'none'},'19317':{type:'enum',name:'Header'},'10692':{type:'fn',name:'maybe_quoted_string'},'11489':{type:'mod',name:'connection'},'19340':{type:'struct',name:'HeaderCollection'},'19257':{type:'enum',name:'Header'},'5881':{type:'enum',name:'RequestUri'},'22495':{type:'enum',name:'Status'},'22529':{type:'enum',name:'Status'},'9141':{type:'enum',name:'HeaderLineErr'},'22516':{type:'enum',name:'Status'},'15800':{type:'enum',name:'Header'},'8601':{type:'enum',name:'Method'},'15795':{type:'enum',name:'Header'},'15770':{type:'enum',name:'Header'},'3197':{type:'trait',name:'Connecter'},'19302':{type:'enum',name:'Header'},'12204':{type:'struct',name:'EntityTag'},'22518':{type:'enum',name:'Status'},'10577':{type:'fn',name:'push_quality'},'8603':{type:'enum',name:'Method'},'22508':{type:'enum',name:'Status'},'22500':{type:'enum',name:'Status'},'19235':{type:'enum',name:'Header'},'22510':{type:'enum',name:'Status'},'9153':{type:'fn',name:'from_stream_with_str'},'9143':{type:'mod',name:'test_utils'},'10787':{type:'fn',name:'quoted_string'},'22462':{type:'mod',name:'status'},'19189':{type:'enum',name:'Header'},'22520':{type:'enum',name:'Status'},'10096':{type:'trait',name:'WriterUtil'},'21954':{type:'mod',name:'rfc2616'},'13333':{type:'fn',name:'header_enum_from_stream'},'15886':{type:'enum',name:'Header'},'5876':{type:'enum',name:'RequestUri'},'22514':{type:'enum',name:'Status'},'3266':{type:'struct',name:'RequestBuffer'},'19330':{type:'enum',name:'Header'},'8597':{type:'enum',name:'Method'},'22501':{type:'enum',name:'Status'},'22482':{type:'enum',name:'Status'},'22537':{type:'enum',name:'Status'},'15820':{type:'enum',name:'Header'},'12552':{type:'mod',name:'host'},'15815':{type:'enum',name:'Header'},'19249':{type:'enum',name:'Header'},'8602':{type:'enum',name:'Method'},'19244':{type:'enum',name:'Header'},'22489':{type:'enum',name:'Status'},'8598':{type:'enum',name:'Method'},'22476':{type:'enum',name:'Status'},'12890':{type:'enum',name:'TransferCoding'},'15747':{type:'mod',name:'request'},'15849':{type:'enum',name:'Header'},'9233':{type:'fn',name:'assert_invalid'},'22018':{type:'fn',name:'is_alpha'},'19321':{type:'enum',name:'Header'},'19214':{type:'enum',name:'Header'},'22526':{type:'enum',name:'Status'},'15891':{type:'enum',name:'Header'},'8605':{type:'enum',name:'Method'},'12342':{type:'fn',name:'strong_etag'},'15867':{type:'enum',name:'Header'},'15896':{type:'enum',name:'Header'},'15952':{type:'enum',name:'Header'},'19312':{type:'enum',name:'Header'},'9139':{type:'enum',name:'HeaderLineErr'},'22471':{type:'enum',name:'Status'},'13181':{type:'enum',name:'ConsumeCommaLWSResult'},'15844':{type:'enum',name:'Header'},'15881':{type:'enum',name:'Header'},'20095':{type:'struct',name:'HeaderCollectionIterator'},'12328':{type:'fn',name:'weak_etag'},'8593':{type:'mod',name:'method'},'13179':{type:'enum',name:'ConsumeCommaLWSResult'},'22517':{type:'enum',name:'Status'},'2761':{type:'fn',name:'read_hexadecimal'},'22488':{type:'enum',name:'Status'},'22512':{type:'enum',name:'Status'},'5891':{type:'enum',name:'RequestUri'},'22522':{type:'enum',name:'Status'},'15935':{type:'enum',name:'Header'},'15871':{type:'enum',name:'Header'},'19225':{type:'enum',name:'Header'},'21976':{type:'fn',name:'is_upalpha'},'10059':{type:'fn',name:'comma_split_iter'},'10942':{type:'fn',name:'push_parameter'},'21997':{type:'fn',name:'is_loalpha'},'22159':{type:'fn',name:'is_token_item'},'22479':{type:'enum',name:'Status'},'2639':{type:'fn',name:'read_decimal'},'15858':{type:'enum',name:'Header'},'19277':{type:'enum',name:'Header'},'21965':{type:'fn',name:'is_char'},'15774':{type:'enum',name:'Header'},'15943':{type:'enum',name:'Header'},'22507':{type:'enum',name:'Status'},'22513':{type:'enum',name:'Status'},'10916':{type:'fn',name:'maybe_unquote_string'},'5877':{type:'enum',name:'RequestUri'},'15902':{type:'enum',name:'Header'},'22497':{type:'enum',name:'Status'},'13707':{type:'struct',name:'HeaderValueByteIterator'},'15810':{type:'enum',name:'Header'},'22483':{type:'enum',name:'Status'},'11036':{type:'enum',name:'RangeUnit'},'1954':{type:'struct',name:'ResponseReader'},'22509':{type:'enum',name:'Status'},'13182':{type:'enum',name:'ConsumeCommaLWSResult'},'22487':{type:'enum',name:'Status'},'19240':{type:'enum',name:'Header'},'22469':{type:'enum',name:'Status'},'10661':{type:'fn',name:'push_maybe_quoted_string'},'8611':{type:'enum',name:'Method'},'11032':{type:'mod',name:'accept_ranges'},'9955':{type:'mod',name:'serialization_utils'},'15835':{type:'enum',name:'Header'},'2580':{type:'mod',name:'common'},'15759':{type:'enum',name:'Header'},'0':{type:'mod',name:'http'},'3230':{type:'mod',name:'request'},'1931':{type:'mod',name:'response'},'19307':{type:'enum',name:'Header'},'11500':{type:'enum',name:'Connection'},'22494':{type:'enum',name:'Status'},'9142':{type:'enum',name:'HeaderLineErr'},'15912':{type:'enum',name:'Header'},'2439':{type:'mod',name:'sslclients'},'15853':{type:'enum',name:'Header'},'1056':{type:'struct',name:'RequestWriter'},'15931':{type:'enum',name:'Header'},'11037':{type:'enum',name:'RangeUnit'},'19194':{type:'enum',name:'Header'},'22525':{type:'enum',name:'Status'},'22527':{type:'enum',name:'Status'},'15921':{type:'enum',name:'Header'},'22474':{type:'enum',name:'Status'},'11910':{type:'fn',name:'MediaType'},'6677':{type:'struct',name:'ResponseWriter'},'22490':{type:'enum',name:'Status'},'12867':{type:'mod',name:'transfer_encoding'},'13176':{type:'typedef',name:'DeltaSeconds'},'15953':{type:'struct',name:'HeaderCollection'},'22472':{type:'enum',name:'Status'},'22499':{type:'enum',name:'Status'},'15830':{type:'enum',name:'Header'},'11162':{type:'enum',name:'AcceptableRanges'},'15805':{type:'enum',name:'Header'},'11494':{type:'enum',name:'Connection'},'22118':{type:'fn',name:'is_hex'},'22470':{type:'enum',name:'Status'},'9120':{type:'mod',name:'headers'},'9138':{type:'enum',name:'HeaderLineErr'},'22477':{type:'enum',name:'Status'},'22496':{type:'enum',name:'Status'},'21956':{type:'fn',name:'is_octet'},'22486':{type:'enum',name:'Status'},'22491':{type:'enum',name:'Status'},'7248':{type:'trait',name:'Server'},'10802':{type:'fn',name:'unquote_string'},'22475':{type:'enum',name:'Status'},'6661':{type:'mod',name:'response'},'10033':{type:'fn',name:'comma_split'},'19262':{type:'enum',name:'Header'},'11741':{type:'mod',name:'content_type'},'22033':{type:'fn',name:'is_digit'},'9378':{type:'fn',name:'assert_conversion_correct'},'15784':{type:'enum',name:'Header'},'19204':{type:'enum',name:'Header'},'15779':{type:'enum',name:'Header'},'22528':{type:'enum',name:'Status'},'15840':{type:'enum',name:'Header'},'10562':{type:'fn',name:'comma_join'},'9961':{type:'fn',name:'normalise_header_name'},'19298':{type:'enum',name:'Header'},'19293':{type:'enum',name:'Header'},'22519':{type:'enum',name:'Status'},'22481':{type:'enum',name:'Status'},'2961':{type:'fn',name:'read_http_version'},'11748':{type:'struct',name:'MediaType'},'5886':{type:'enum',name:'RequestUri'},'15825':{type:'enum',name:'Header'},'19267':{type:'enum',name:'Header'},'3193':{type:'mod',name:'connecter'},'11155':{type:'enum',name:'AcceptableRanges'},'15916':{type:'enum',name:'Header'},'10974':{type:'fn',name:'push_parameters'},'22524':{type:'enum',name:'Status'},'22466':{type:'enum',name:'Status'},'3216':{type:'mod',name:'server'},'9203':{type:'fn',name:'to_stream_into_str'},'22523':{type:'enum',name:'Status'},'22505':{type:'enum',name:'Status'},'22473':{type:'enum',name:'Status'},'19177':{type:'mod',name:'response'},'13285':{type:'trait',name:'HeaderEnum'},'7929':{type:'struct',name:'Config'},'19272':{type:'enum',name:'Header'},'12556':{type:'struct',name:'Host'},'23':{type:'struct',name:'BufferedStream'},'1034':{type:'mod',name:'client'},'22511':{type:'enum',name:'Status'},'15926':{type:'enum',name:'Header'},'2451':{type:'enum',name:'NetworkStream'},'19339':{type:'enum',name:'Header'},'9140':{type:'enum',name:'HeaderLineErr'},'22492':{type:'enum',name:'Status'},'16886':{type:'struct',name:'HeaderCollectionIterator'},'15876':{type:'enum',name:'Header'},'22484':{type:'enum',name:'Status'},'19288':{type:'enum',name:'Header'},'5788':{type:'struct',name:'Request'},'8599':{type:'enum',name:'Method'},'7':{type:'mod',name:'buffer'},'22498':{type:'enum',name:'Status'},'19253':{type:'enum',name:'Header'},'19220':{type:'enum',name:'Header'},'22478':{type:'enum',name:'Status'},'13180':{type:'enum',name:'ConsumeCommaLWSResult'},'8600':{type:'enum',name:'Method'},'22521':{type:'enum',name:'Status'},'15790':{type:'enum',name:'Header'}};

initSearch(searchIndex);
